#
# A high availability PostgreSQL cluster, in the "db" namespace.
#
# We use one PostgreSQL cluster for all micro-services.
#
# If you want one database cluster per micro-service, then you'll need to
# copy-pasta this manifest, but change the namespace (one database cluster
# per namespace).
#
# Based on:
#
#     https://www.kubegres.io/doc/getting-started.html
#
# We expect the passwords for the PostgreSQL root and replication users
# to have already been created in Vault, and the Vault sidecar injector
# enabled for "db" namespace via label vault-injection = enabled.
# The Vault sidecar is expected to spin up alongside the Kubegres pods,
# via pod label app = postgres (applied by Kubegres, which does not
# seem to allow arbitrary labels to be added to the Pods).
#
# Note that the default password hashing, as of Postgres 16.x, is
# scram-sha-256 (a good thing; older Postgres used MD5).
#
#     https://www.postgresql.org/docs/current/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION
#
# TODO !!! Except this seems to be a lie.  From /etc/pg_hba.conf in
#          a running postgres-1-0 pod:
#
#     cat /etc/pg_hba.conf 
#      # TYPE  DATABASE        USER            ADDRESS                 METHOD
#      # Replication connections by a user with the replication privilege
#      host    replication     replication     all                     md5
#      # As long as it is authenticated, all connections allowed except from "0.0.0.0/0"
#      local   all             all                                     md5
#      host    all             all             all                     md5
#      host    all             all             0.0.0.0/0               reject
#
#     I.e. lots of passwords using md5 hashing!  :(
#
---
#
# Based on:
#
#     https://www.kubegres.io/doc/getting-started.html
#     https://www.kubegres.io/doc/properties-explained.html
#
apiVersion: kubegres.reactive-tech.io/v1
kind: Kubegres
metadata:
  name: postgres
  namespace: db
  annotations:
    vault.hashicorp.com/vault-injection: enabled  # Use Vault injector sidecar for secrets.
    vault.hashicorp.com/agent-inject: 'true'
    vault.hashicorp.com/role: 'database-admin'
    # !!! fix this:
    vault.hashicorp.com/agent-inject-secret-database-config.txt: 'internal/data/database/config'

spec:

  replicas: 3
  image: postgres:16.1
  port: 5432

  database:
    size: 256Mi
    storageClassName: kubedemo-block
    volumeMount: /var/lib/postgresql/data

  resources:
    limits:
      memory: "4Gi"
    requests:
      memory: "1Gi"
      cpu: "256m"

  volume:
    volumes:
      #
      # For communicating (via CSI secrets provider) with Vault:
      #
      - name: db-vault-client-certificate
        secret:
          secretName: db-vault-client-certificate
      #
      # The actual Postgres passwords CSI secret volume:
      #
      - name: postgres-passwords
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "postgres-passwords"

    volumeMounts:
      #
      # For communicating (via CSI secrets provider) with Vault:
      #
      - name: db-vault-client-certificate
        mountPath: "/opt/vault/tls/vault"
        readOnly: true
      #
      # The actual Postgres passwords CSI secret mount:
      #
      - name: postgres-passwords
        mountPath: /etc/postgres-passwords

  env:
    - name: FOO
      valueFrom:
        secretKeyRef:
          name: db-vault-client-certificate
          key: ca.crt
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: postgres-passwords
          key: superUserPassword

    - name: POSTGRES_REPLICATION_PASSWORD
      valueFrom:
        secretKeyRef:
          name: postgres-passwords
          key: replicationUserPassword
